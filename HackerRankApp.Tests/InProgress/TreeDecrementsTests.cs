using HackerRankApp.InProgress;

namespace HackerRankApp.Tests.InProgress;

public class TreeDecrementsTests
{
	[Fact]
	public void Run_01()
	{
		// Node1 connects to Node2 [1, 2]; Node1 connects to Node3 [1, 3]
		// Cost Node1-Node2: Find Edg1 [1, 2], Cost=1
		// Cost Node1-Node3: Find Edg2 [1, 3], Cost=1
		// Cost Node2-Node3: Find Edge1 [2, 1]/[1, 2], then Edg2 [1, 3], Cost=2, i.e. 2 edges
		// Cost Node2-Node2: Cost=0

		// Different Nodes are selected. Value can be decreased by 1.Cost is the edge count between the nodes
		// e.g Node1 and Node2 are selected. Decrease 1: Value1=3, Value2=1 -> Value=2, Value=0; Cost=1
		// Same node is selected twice. Value can be decreased by 2. Cost is 0 since there is no edge between nodes

		// Sample strategy is
		// 1. Select Node1 and Node2. Decrease by 1 ([2, 0, 2]). Cost+=1
		// 2. Select Node1 and Node1, Decrease by 2 ([0, 0, 2]). Cost+=0
		// 3. Select Node3 and Node3, Decrease by 2 ([0, 0, 0]). Cost+=0
		// MinimumCost=Cost=1

		// Values at all nodes can be decreased to 0, i.e. Sum(vals) is even number

		List<int> val = [3, 1, 2];
		int tNodes = 3;
		List<int> tFrom = [1, 1];
		List<int> tTo = [2, 3];

		int expectation = 1;

		var handleTask = () => TreeDecrements.Run(val, tNodes, tFrom, tTo);

		handleTask.Should().NotThrow()
			.Which.Should().Be(expectation);
	}

	[Fact]
	public void Run_02()
	{
		List<int> val = [2, 1, 1];
		int tNodes = 3;
		List<int> tFrom = [1, 1];
		List<int> tTo = [2, 3];

		int expectation = 2;

		var handleTask = () => TreeDecrements.Run(val, tNodes, tFrom, tTo);

		handleTask.Should().NotThrow()
			.Which.Should().Be(expectation);
	}

	/// <summary>
	/// Test 05
	/// </summary>
	//[Fact]
	//public void Run_03()
	//{
	//	List<int> val = [23, 18, 6, 24, 48, 20, 21, 19, 39, 43, 37, 41, 30, 19, 32, 12, 10, 45, 33, 44, 19, 18, 31, 44, 37, 48, 27, 13, 41, 44, 32, 21, 45, 32, 27, 26, 13, 6, 20, 46, 50, 29, 28, 42, 22, 1, 48, 42, 15, 7, 23, 19, 31, 24, 47, 7, 39, 10, 9, 4, 21, 39, 13, 2, 8, 39, 17, 43, 19, 11, 39, 49, 48, 46, 23, 47, 17, 6, 21, 20, 8, 27, 27, 24, 21, 15, 37, 39, 16, 11, 10, 13, 33, 14, 3, 9, 26, 20, 27, 48, 25, 48];
	//	int tNodes = 102;
	//	List<int> tFrom = [42, 30, 86, 59, 99, 41, 94, 90, 92, 36, 34, 90, 10, 39, 94, 16, 47, 25, 55, 23, 53, 42, 86, 51, 23, 79, 61, 86, 20, 11, 67, 9, 89, 48, 55, 50, 62, 28, 70, 28, 83, 79, 7, 59, 51, 91, 88, 67, 86, 100, 44, 87, 1, 52, 14, 94, 76, 40, 84, 89, 80, 3, 63, 6, 27, 3, 14, 98, 86, 51, 1, 46, 97, 13, 56, 30, 63, 66, 82, 64, 70, 35, 45, 72, 4, 34, 21, 23, 18, 54, 82, 24, 90, 59, 99, 60, 52, 55, 46, 2, 84];
	//	List<int> tTo = [85, 84, 83, 47, 101, 87, 99, 25, 4, 102, 90, 15, 17, 86, 69, 72, 67, 5, 27, 36, 90, 45, 8, 60, 61, 10, 37, 14, 69, 33, 43, 43, 96, 73, 33, 83, 91, 80, 5, 36, 45, 9, 4, 61, 75, 14, 60, 73, 69, 79, 57, 59, 81, 20, 59, 78, 102, 21, 15, 83, 44, 73, 80, 100, 87, 65, 68, 14, 84, 5, 50, 39, 84, 12, 59, 2, 7, 83, 49, 83, 74, 23, 29, 80, 95, 71, 82, 12, 102, 97, 35, 2, 22, 26, 38, 31, 32, 77, 19, 58, 93];

	//	int expectation = 52;

	//	// 52 is wrong, but it is current minimum

	//	var handleTask = () => TreeDecrements.Run(val, tNodes, tFrom, tTo);

	//	handleTask.Should().NotThrow()
	//		.Which.Should().Be(expectation);
	//}

	/// <summary>
	/// Test 10
	/// </summary>
	//[Fact]
	//public void Run_04()
	//{
	//	List<int> val = [19, 37, 30, 7, 1, 23, 6, 49, 27, 32, 11, 45, 7, 12, 43, 8, 10, 9, 13, 16, 45, 37, 30, 23, 4, 33, 37, 40, 26, 2, 34, 19, 33, 36, 17, 41, 45, 49, 18, 20, 19, 38, 47, 49, 20, 50, 46, 26, 31, 27, 47, 16, 20, 20, 46, 18, 10, 46, 42, 23, 38, 44, 10, 5, 39, 13, 17, 22, 1, 9, 2, 41, 25, 25, 10, 21, 42, 14, 19, 43, 38, 48, 32, 13, 14, 24, 27, 19, 35, 15, 32, 16, 17, 46, 8, 4, 22, 31, 12, 15, 32, 18, 47, 2, 4, 19, 38, 41, 42, 19, 25, 9, 35, 31, 30, 4, 17, 11, 37, 4, 32, 27, 14, 42, 4, 2, 15, 13, 29, 8, 1, 2, 43, 18, 14, 48, 34, 14, 18, 19, 3, 28, 49, 16, 37, 29, 17, 40, 15, 24, 17, 16, 21, 24, 14, 28, 8, 5, 29, 39, 47, 21, 12, 32, 15, 23, 13, 35, 14, 30, 45, 50, 4, 32, 21, 33, 7, 30, 40, 12, 2, 6, 38, 34, 8, 2, 50, 49, 9, 38, 48, 39, 45, 50, 19, 41, 37, 37, 22, 44, 32, 45, 35, 7, 45, 8, 39, 6, 9, 18, 8, 36, 19, 39, 41, 10, 3, 40, 41, 11, 36, 20, 45, 50, 41, 4, 22, 42, 4, 11, 40, 34, 43, 2, 29, 29, 11, 5, 20, 31, 18, 50, 46, 43, 3, 19, 14, 1, 5, 3, 10, 23, 26, 50, 2, 16, 6, 47, 11, 19, 30, 27, 30, 22, 13, 33, 2, 28, 11, 43, 36, 6, 48, 7, 19, 42, 16, 44, 26, 5, 22, 19, 36, 29, 20, 46, 15, 34, 14, 2, 29, 21, 15, 11, 12, 24, 35, 33, 28, 8, 27, 27, 37, 20, 5, 31, 7, 12, 31, 15, 32, 31, 46, 42, 4, 19, 20, 4, 13, 33, 29, 47, 45, 44, 40, 50, 17, 24, 21, 43, 21, 5, 45, 47, 15, 17, 5, 38, 33, 38, 8, 9, 11, 18, 7, 39, 15, 14, 2, 24, 11, 35, 20, 45, 37, 41, 21, 8, 44, 5, 10, 36, 41, 8, 5, 29, 42, 40, 9, 12, 45, 35, 17, 45, 24, 24, 49, 19, 50, 40, 43, 41, 26, 49, 4, 6, 18, 36, 30, 14, 22, 41, 23, 31, 25, 22, 21, 27, 27, 46];
	//	int tNodes = 400;
	//	List<int> tFrom = [10, 324, 329, 325, 118, 40, 187, 357, 314, 331, 333, 279, 397, 56, 340, 257, 164, 35, 152, 289, 19, 156, 170, 387, 111, 5, 176, 66, 5, 126, 338, 16, 194, 270, 99, 296, 277, 295, 7, 367, 279, 372, 163, 395, 124, 371, 36, 296, 12, 178, 376, 106, 315, 65, 31, 217, 364, 96, 155, 304, 363, 69, 191, 309, 361, 207, 214, 36, 185, 94, 54, 394, 382, 269, 90, 194, 223, 314, 142, 198, 83, 297, 208, 6, 291, 313, 193, 165, 370, 116, 239, 276, 201, 400, 29, 199, 63, 64, 91, 213, 8, 391, 363, 264, 117, 174, 94, 299, 24, 201, 58, 108, 258, 348, 184, 315, 59, 381, 274, 15, 395, 362, 187, 370, 34, 358, 278, 107, 259, 53, 109, 279, 24, 230, 115, 315, 266, 182, 194, 115, 396, 238, 229, 12, 146, 337, 175, 122, 307, 35, 13, 34, 270, 200, 66, 384, 30, 251, 88, 268, 378, 347, 259, 268, 374, 251, 315, 307, 134, 211, 400, 79, 4, 292, 49, 373, 292, 171, 331, 208, 364, 162, 142, 353, 34, 43, 114, 327, 16, 177, 210, 368, 226, 9, 377, 144, 290, 42, 5, 81, 287, 113, 284, 135, 347, 87, 232, 238, 160, 324, 25, 5, 10, 26, 376, 33, 22, 170, 65, 253, 280, 218, 41, 362, 191, 362, 130, 257, 242, 27, 70, 108, 2, 216, 79, 65, 335, 379, 116, 336, 193, 291, 348, 34, 178, 196, 184, 221, 240, 182, 58, 32, 366, 227, 98, 213, 84, 303, 268, 298, 261, 256, 255, 300, 137, 345, 193, 184, 177, 129, 20, 205, 32, 236, 105, 252, 136, 297, 359, 151, 87, 145, 339, 281, 60, 290, 31, 38, 377, 169, 222, 77, 358, 176, 233, 283, 57, 21, 64, 49, 101, 235, 361, 244, 108, 224, 10, 145, 385, 70, 360, 386, 284, 235, 117, 343, 5, 335, 17, 212, 191, 157, 319, 177, 236, 188, 389, 124, 318, 245, 12, 76, 221, 246, 204, 259, 91, 86, 57, 387, 150, 121, 304, 279, 288, 27, 40, 147, 125, 52, 125, 355, 102, 92, 10, 65, 24, 120, 219, 225, 180, 64, 198, 189, 112, 260, 13, 148, 294, 324, 167, 261, 5, 278, 156, 368, 334, 125, 380, 123, 12, 320, 210, 154, 397, 115, 243, 229, 89, 272, 317, 179, 155, 388, 198, 178, 348, 104, 332];
	//	List<int> tTo = [245, 44, 391, 267, 190, 282, 153, 72, 310, 224, 149, 392, 228, 373, 215, 183, 305, 375, 329, 363, 140, 301, 161, 165, 93, 248, 315, 161, 141, 232, 307, 302, 24, 234, 35, 10, 151, 349, 391, 216, 84, 131, 364, 158, 181, 85, 211, 98, 281, 365, 305, 208, 226, 34, 250, 257, 207, 330, 279, 116, 245, 355, 359, 169, 75, 193, 116, 87, 342, 231, 309, 155, 145, 246, 230, 149, 369, 197, 11, 111, 283, 313, 377, 127, 23, 171, 29, 75, 43, 212, 232, 359, 375, 46, 238, 131, 298, 97, 354, 67, 301, 311, 161, 146, 240, 47, 117, 31, 302, 281, 91, 192, 80, 208, 340, 230, 115, 119, 357, 207, 110, 318, 293, 286, 209, 138, 395, 330, 102, 397, 99, 393, 172, 99, 244, 383, 369, 53, 206, 113, 329, 212, 62, 255, 242, 146, 327, 351, 197, 306, 173, 46, 347, 65, 68, 200, 37, 25, 268, 141, 189, 280, 202, 85, 347, 20, 181, 206, 94, 28, 100, 13, 346, 118, 182, 58, 68, 56, 357, 267, 125, 259, 163, 325, 355, 271, 330, 109, 68, 379, 140, 133, 370, 358, 50, 84, 197, 11, 328, 118, 192, 311, 343, 71, 380, 71, 164, 372, 214, 254, 288, 62, 4, 31, 24, 23, 307, 107, 192, 41, 283, 135, 175, 249, 95, 351, 79, 364, 70, 247, 195, 270, 158, 373, 378, 378, 241, 234, 139, 16, 111, 385, 12, 325, 244, 80, 99, 201, 111, 369, 10, 244, 33, 164, 152, 128, 333, 307, 339, 374, 369, 366, 393, 95, 312, 37, 239, 288, 26, 385, 243, 39, 102, 60, 382, 359, 303, 168, 1, 98, 45, 259, 309, 273, 335, 291, 264, 272, 103, 73, 181, 245, 344, 203, 211, 211, 153, 231, 285, 208, 375, 185, 34, 44, 399, 175, 341, 359, 356, 39, 249, 47, 68, 395, 55, 381, 115, 145, 108, 40, 67, 267, 212, 318, 322, 110, 83, 132, 321, 51, 220, 37, 140, 66, 34, 352, 395, 113, 234, 323, 379, 262, 295, 143, 237, 389, 312, 396, 398, 239, 121, 301, 345, 292, 78, 61, 159, 294, 101, 61, 112, 47, 258, 326, 333, 335, 74, 39, 279, 127, 35, 123, 265, 18, 9, 264, 377, 174, 3, 166, 82, 199, 14, 230, 275, 308, 48, 350, 153, 334, 379, 102, 316, 166, 186, 263, 390, 353, 285];

	//	int expectation = 52;

	//	// 258 is wrong, but it is current minimum

	//	var handleTask = () => TreeDecrements.Run(val, tNodes, tFrom, tTo);

	//	handleTask.Should().NotThrow()
	//		.Which.Should().Be(expectation);
	//}

	//[Fact]
	//public void Run_05()
	//{
	//	List<int> val = [36, 15, 44, 25, 20, 20, 47, 16, 24, 47, 27, 10, 50, 5, 10, 29, 6, 2, 29, 30, 11, 32, 24, 40, 23, 27, 27, 13, 4, 28, 17, 5, 22, 26, 28, 7, 4, 37, 39, 36, 34, 47, 6, 28, 14, 3, 31, 24, 35, 30, 33, 8, 25, 24, 43, 15, 3, 11, 20, 21, 24, 36, 41, 8, 41, 49, 13, 28, 16, 24, 15, 41, 10, 39, 22, 33, 50, 10, 31, 8, 33, 9, 22, 26, 45, 14, 21, 42, 31, 34, 4, 4, 5, 19, 31, 20, 50, 1, 25, 12, 2, 19, 43, 8, 32, 45, 33, 7, 44, 29, 31, 21, 5, 42, 33, 38, 15, 6, 49, 44, 36, 40, 17, 28, 22, 14, 23, 43, 4, 26, 23, 16, 4, 8, 28, 8, 25, 45, 50, 25, 41, 12, 1, 27, 49, 36, 23, 23, 9, 32, 21, 5, 3, 5, 40, 43, 46, 49, 12, 10, 6, 35, 27, 37, 15, 40, 31, 37, 38, 43, 21, 23, 30, 34, 50, 5, 14, 45, 45, 16, 10, 43, 10, 16, 40, 11, 49, 47, 18, 44, 27, 29, 7, 1, 34, 33, 35, 11, 3, 30, 30, 8, 45, 48, 32, 7, 19, 6, 26, 40, 11, 34, 4, 3, 49, 4, 42, 21, 26, 5, 43, 1, 1, 50, 29, 4, 46, 28, 23, 37, 41, 38, 42, 14, 31, 40, 48, 47, 32, 42, 5, 5, 42, 31, 27, 36, 10, 33, 41, 16, 16, 35, 24, 5, 6, 33, 20, 33, 27, 37, 16, 15, 10, 12, 21, 45, 17, 37, 19, 26, 34, 49, 1, 49, 41, 12, 24, 46, 17, 47, 24, 4, 7, 35, 23, 28, 16, 44, 8, 12, 33, 7, 15, 7, 3, 3, 3, 21, 34, 29, 35, 18, 2, 17, 34, 12, 3, 32, 48, 22, 14, 22, 4, 44, 3, 36, 34, 5, 49, 45, 26, 25, 8, 8, 19, 37, 42, 30, 20, 43, 8, 16, 43, 25, 27, 20, 43, 48, 5, 20, 26, 24, 39, 46, 2, 44, 41, 31, 22, 18, 28, 22, 49, 7, 11, 16, 34, 19, 36, 17, 7, 28, 44, 47, 4, 39, 21, 27, 46, 13, 36, 33, 10, 26, 6, 23, 26, 24, 4, 23, 20, 49, 49, 44, 38, 47, 2, 28, 17, 2, 17, 1, 30, 2, 3, 40, 17, 19, 48, 41];
	//	int tNodes = 400;
	//	List<int> tFrom = [292, 161, 112, 260, 319, 295, 288, 69, 82, 240, 149, 27, 99, 173, 294, 62, 250, 71, 189, 348, 131, 221, 175, 59, 263, 266, 265, 196, 241, 374, 151, 242, 5, 198, 396, 337, 239, 57, 226, 286, 341, 132, 112, 327, 325, 385, 308, 187, 360, 281, 316, 256, 269, 256, 218, 218, 70, 162, 297, 202, 321, 292, 352, 305, 383, 150, 299, 181, 307, 284, 282, 331, 161, 101, 128, 294, 301, 79, 333, 231, 272, 290, 56, 221, 60, 134, 127, 128, 107, 384, 369, 212, 278, 62, 42, 41, 57, 321, 18, 217, 75, 397, 182, 6, 361, 325, 189, 152, 204, 48, 25, 251, 28, 389, 150, 306, 179, 325, 257, 361, 348, 139, 161, 197, 365, 18, 166, 54, 199, 65, 343, 100, 125, 160, 74, 205, 165, 344, 125, 196, 377, 50, 227, 135, 95, 365, 167, 201, 85, 243, 109, 364, 271, 196, 308, 52, 396, 338, 336, 124, 218, 137, 129, 359, 262, 283, 63, 132, 153, 159, 9, 195, 19, 393, 316, 246, 159, 163, 3, 187, 390, 326, 100, 292, 25, 262, 352, 188, 317, 68, 198, 73, 90, 24, 188, 280, 358, 386, 193, 79, 375, 333, 221, 196, 213, 71, 172, 219, 398, 72, 63, 205, 142, 72, 326, 293, 335, 392, 222, 65, 364, 86, 76, 210, 83, 22, 233, 63, 143, 254, 151, 7, 190, 14, 397, 131, 213, 328, 88, 181, 114, 161, 174, 305, 23, 356, 14, 143, 30, 321, 380, 65, 373, 167, 314, 186, 360, 183, 150, 43, 64, 370, 371, 154, 71, 291, 259, 15, 219, 367, 349, 275, 205, 319, 237, 32, 157, 198, 312, 175, 117, 309, 80, 49, 371, 302, 96, 59, 27, 350, 178, 7, 136, 173, 81, 215, 32, 124, 75, 14, 106, 264, 295, 379, 317, 248, 142, 107, 16, 326, 352, 4, 11, 285, 148, 384, 77, 111, 281, 134, 328, 399, 220, 20, 340, 68, 102, 138, 285, 263, 298, 145, 51, 273, 368, 344, 226, 127, 379, 64, 113, 203, 184, 40, 321, 126, 200, 351, 320, 30, 366, 223, 154, 395, 106, 1, 157, 192, 216, 213, 287, 225, 346, 168, 362, 171, 272, 21, 179, 286, 386, 264, 108, 97, 175, 317, 288, 396, 375, 329, 61, 116, 33, 374, 236, 387, 149, 71, 211, 136, 283, 193, 93, 115, 388, 294, 346, 55, 261];
	//	List<int> tTo = [66, 180, 380, 14, 328, 125, 268, 255, 243, 320, 397, 120, 378, 245, 222, 293, 338, 358, 74, 289, 85, 116, 147, 57, 282, 248, 64, 319, 86, 90, 133, 87, 226, 114, 52, 295, 212, 214, 394, 375, 233, 7, 212, 2, 238, 248, 153, 214, 53, 185, 67, 4, 185, 44, 198, 120, 116, 331, 151, 390, 297, 41, 247, 283, 70, 257, 202, 62, 333, 103, 334, 365, 320, 186, 369, 180, 286, 121, 103, 274, 140, 224, 94, 214, 162, 380, 5, 14, 69, 221, 376, 330, 33, 193, 24, 201, 173, 32, 101, 165, 393, 75, 206, 257, 281, 205, 118, 94, 45, 212, 378, 268, 276, 28, 162, 12, 331, 10, 377, 308, 136, 228, 345, 313, 311, 100, 83, 132, 298, 272, 130, 385, 322, 141, 179, 230, 113, 304, 84, 10, 395, 227, 91, 178, 201, 177, 46, 136, 136, 383, 6, 151, 239, 187, 368, 360, 128, 39, 39, 94, 110, 145, 233, 163, 104, 62, 144, 113, 209, 35, 194, 302, 118, 104, 390, 242, 397, 179, 222, 296, 6, 191, 13, 92, 70, 229, 128, 384, 197, 262, 222, 1, 321, 191, 363, 9, 94, 372, 126, 65, 335, 269, 333, 105, 229, 263, 311, 116, 187, 380, 155, 79, 231, 223, 8, 250, 14, 34, 357, 257, 50, 214, 366, 185, 218, 260, 378, 136, 372, 79, 244, 143, 36, 19, 361, 116, 100, 170, 62, 290, 89, 145, 349, 271, 374, 344, 191, 198, 339, 316, 9, 212, 198, 185, 95, 169, 258, 178, 226, 70, 32, 179, 232, 268, 276, 331, 156, 82, 165, 150, 67, 190, 228, 55, 157, 353, 369, 313, 384, 57, 7, 363, 4, 238, 355, 240, 45, 12, 371, 270, 332, 37, 347, 234, 12, 380, 36, 264, 310, 315, 324, 297, 338, 323, 342, 354, 399, 314, 298, 267, 146, 361, 119, 272, 358, 29, 337, 77, 122, 382, 259, 13, 73, 148, 137, 176, 387, 396, 350, 327, 272, 26, 376, 400, 216, 177, 160, 87, 174, 17, 318, 119, 171, 68, 392, 11, 157, 94, 98, 152, 306, 58, 309, 381, 345, 323, 206, 12, 332, 208, 255, 313, 45, 206, 108, 319, 253, 339, 400, 130, 158, 277, 49, 93, 235, 391, 279, 38, 164, 127, 94, 346, 321, 31, 336, 156, 123, 303, 217, 300, 249, 47, 290, 398, 321, 252, 78, 207, 167];

	//	int expectation = 52;

	//	// 288 is wrong, but it is current minimum

	//	var handleTask = () => TreeDecrements.Run(val, tNodes, tFrom, tTo);

	//	handleTask.Should().NotThrow()
	//		.Which.Should().Be(expectation);
	//}
}
